// Function Name: common-i18n
import type {
  SupportedLocale,
  Table_User,
} from "@/common-types"
import { supportedLocales } from "@/common-types"

export type LangAtom = Record<SupportedLocale, Record<string, string>>
export interface GetLangValOpt {
  locale?: SupportedLocale
  body?: any
  user?: Table_User
}

/********************* Á©∫ÂáΩÊï∞ ****************/
export async function main(ctx: FunctionContext) {
  console.log("do nothing")
  return true
}

/********************* ÂêÑÂçïÂÖÉ ****************/

export const commonLang: LangAtom = {
  "zh-Hans": {
    "appName": "ÁïôÁôΩËÆ∞‰∫ã",
  },
  "zh-Hant": {
    "appName": "ÁïôÁôΩË®ò‰∫ã",
  },
  "en": {
    "appName": "Liubai"
  }
}

export const userLoginLang: LangAtom = {
  "zh-Hans": {
    "confirmation_subject": "Á°ÆËÆ§‰ø°",
    "confirmation_text_1": "‰Ω†Ê≠£Âú®ÁôªÂΩï{appName}Ôºå‰ª•‰∏ãÊòØ‰Ω†ÁöÑÈ™åËØÅÁ†Å:\n\n{code}",
    "confirmation_text_2": "\n\nËØ•È™åËØÅÁ†Å 15 ÂàÜÈíüÂÜÖÊúâÊïà„ÄÇ"
  },
  "zh-Hant": {
    "confirmation_subject": "Á¢∫Ë™ç‰ø°",
    "confirmation_text_1": "‰Ω†Ê≠£Âú®ÁôªÂÖ•{appName}Ôºå‰ª•‰∏ãÊòØ‰Ω†ÁöÑÈ©óË≠â‰ª£Ëôü:\n\n{code}",
    "confirmation_text_2": "\n\nË©≤È©óË≠â‰ª£Ëôü 15 ÂàÜÈêòÂÖßÊúâÊïà„ÄÇ"
  },
  "en": {
    "confirmation_subject": "Confirmation",
    "confirmation_text_1": "You are logging into {appName}. The following is your Vertification Code:\n\n{code}",
    "confirmation_text_2": "\n\nIt is valid within 15 minutes."
  }
}

export const wecomLang: LangAtom = {
  "zh-Hans": {
    "welcome_1": "Hi! ÊàëÊòØÁïôÂ∞èÁôΩÔºå‰Ω†Â∑≤ÊàêÂäüÁªëÂÆöË¥¶Âè∑ {account}\nÂú®‰Ω†ÁöÑÁïôÁôΩËÆ∞‰∫ã‰∏≠ÔºåËã•Â≠òÂú®ÈúÄË¶ÅÊèêÈÜíÁöÑÂç°ÁâáÔºåÊàëÂ∞ÜÂú®Á¨¨‰∏ÄÊó∂Èó¥ÈÄöÁü•‰Ω†ÔºÅ",
    "welcome_2": "‰Ω†Â•Ωü•ÇÔºåÊàëÊòØÁïôÂ∞èÁôΩÔºÅ‰Ω†ÁöÑÂæÆ‰ø°ËÆ∞ÂΩïÂä©ÊâãÔºÅÊàëÂèØ‰ª•Êää‰Ω†‰º†ÁªôÊàëÁöÑÊ∂àÊÅØÂêåÊ≠•Âà∞ÁïôÁôΩËÆ∞‰∫ã‰∏äÂì¶ÔΩû\n\nËØ∑ÁÇπÂáª‰∏ãÊñπÈìæÊé•ÔºåÂÆåÊàêÂ∏êÂè∑ÁªëÂÆö„ÄÇ\n\n{link}",
    "welcome_3": "‰Ω†Â•ΩÔºåÊàëÊòØÁïôÂ∞èÁôΩÔºÅ‰Ω†ÁöÑÂæÆ‰ø°Ê∂àÊÅØÊçïÊçâÂä©ÊâãÔºÅ\n\nÊàëÊ≥®ÊÑèÂà∞‰Ω†Êâ´ÊèèÁöÑ‰∫åÁª¥Á†Å‰ºº‰πéÂ∑≤ËøáÊúüÊàñÂ§±ÊïàÔºåËØ∑ÁÇπÂáª‰∏ãÊñπÈìæÊé•ÔºåÈáçÊñ∞ÁªëÂÆöÂ∏êÂè∑„ÄÇ\n\n{link}",
    "err_1": "ÁªëÂÆöÂ§±Ë¥•ÔºåËØ•ÂæÆ‰ø°Âè∑Â∑≤‰∏éÂÖ∂‰ªñÁïôÁôΩËÆ∞‰∫ãÂ∏êÂè∑ÂÆåÊàêÂÖ≥ËÅî„ÄÇËØ∑Âú®ÂéüÁïôÁôΩËÆ∞‰∫ãÂ∏êÂè∑‰∏äËß£Èô§ÁªëÂÆöÂêéÔºåÂÜçÈáçÊñ∞Êâ´Á†Å„ÄÇ",
  },
  "zh-Hant": {
    "welcome_1": "Hi! ÊàëÊòØÁïôÂ∞èÁôΩÔºå‰Ω†Â∑≤ÊàêÂäüÁ∂ÅÂÆöÂ∏≥Ëôü {account}\nÂú®‰Ω†ÁöÑÁïôÁôΩË®ò‰∫ã‰∏≠ÔºåËã•Â≠òÂú®ÈúÄË¶ÅÊèêÈÜíÁöÑÂç°ÁâáÔºåÊàëÂ∞áÂú®Á¨¨‰∏ÄÊôÇÈñìÈÄöÁü•‰Ω†ÔºÅ",
    "welcome_2": "‰Ω†Â•Ωü•ÇÔºåÊàëÊòØÁïôÂ∞èÁôΩÔºÅ‰Ω†ÁöÑÂæÆ‰ø°Ë®òÈåÑÂä©ÁêÜÔºÅÊàëÂèØ‰ª•Êää‰Ω†ÂÇ≥Áµ¶ÊàëÁöÑË®äÊÅØÂêåÊ≠•Âà∞ÁïôÁôΩË®ò‰∫ã‰∏äÂì¶ÔΩû\n\nË´ãÈªûÊìä‰∏ãÊñπÈÄ£ÁµêÔºåÂÆåÊàêÂ∏≥ËôüÁ∂ÅÂÆö„ÄÇ\n\n{link}",
    "welcome_3": "‰Ω†Â•ΩÔºåÊàëÊòØÁïôÂ∞èÁôΩÔºÅ‰Ω†ÁöÑÂæÆ‰ø°Ë®äÊÅØÊçïÊçâÂä©ÁêÜÔºÅ\n\nÊàëÊ≥®ÊÑèÂà∞‰Ω†ÊéÉÊèèÁöÑ QR Code ‰ºº‰πéÂ∑≤ÈÅéÊúüÊàñÂ§±ÊïàÔºåËØ∑ÈªûÊìä‰∏ãÊñπÈÄ£ÁµêÔºåÈáçÊñ∞Á∂ÅÂÆöÂ∏≥Ëôü„ÄÇ\n\n{link}",
    "err_1": "Á∂ÅÂÆöÂ§±ÊïóÔºåË©≤ÂæÆ‰ø°ËôüÂ∑≤ËàáÂÖ∂‰ªñÁïôÁôΩË®ò‰∫ãÂ∏≥ËôüÂÆåÊàêÁ∂ÅÂÆö„ÄÇË´ãÂú®ÂéüÁïôÁôΩË®ò‰∫ãÂ∏≥Ëôü‰∏äËß£Èô§Á∂ÅÂÆöÂæåÔºåÂÜçÈáçÊñ∞ÊéÉÊèè QR Code",
  },
  "en": {
    "welcome_1": "Hi! I am Tiny Liu! You have successfully bound your account {account}\nIf you have any card you want to remind, I will notify you in the first time!",
    "welcome_2": "Hiü•Ç I am Tiny Liu! Your Wechat Record Assistant! My duty is synchronising your message to your Liubai.\n\nNow, let's click the following link to bind your account. \n\n{link}",
    "welcome_3": "Hi, I am Tiny Liu! Your Wechat Message Capture Assistant!\n\nI notice that your QR code has expired or is invalid. Please click the following link to rebind your account.\n\n{link}",
    "err_1": "Binding failed. This Wechat number has already been bound to another account. Please unbind it from the original account first, then re-scan the QR code.",
  }
}




/********************* Êò†Â∞ÑÂáΩÊï∞ ****************/

/** Ëé∑ÂèñÂÖúÂ∫ïËØ≠Ë®Ä */
let fallbackLocale: SupportedLocale | undefined
function getFallbackLocale(): SupportedLocale {
  if(fallbackLocale) return fallbackLocale
  const f = process.env.LIU_FALLBACK_LOCALE
  if(!f) return "en"
  const existed = supportedLocales.includes(f as SupportedLocale)
  if(!existed) return "en"
  fallbackLocale = f as SupportedLocale
  return fallbackLocale
}

/** ÂΩí‰∏ÄÂåñËØ≠Ë®Ä */
function normalizeLanguage(val: string): SupportedLocale {
  val = val.toLowerCase()
  if(!val) return getFallbackLocale()

  val = val.replace(/_/g, "-")

  if(val === "zh-hant") return "zh-Hant"
  if(val === "zh-tw") return "zh-Hant"
  if(val === "zh-hk") return "zh-Hant"
  if(val === "zh-cn") return "zh-Hans"
  if(val === "zh-hans") return "zh-Hans"
  if(val.startsWith("zh")) return "zh-Hans"

  return getFallbackLocale()
}

/** Ëé∑ÂèñÂΩìÂâçÊ≥®ÂÖ•‰ø°ÊÅØ‰∏ãÁöÑËØ≠Ë®Ä */
function getCurrentLocale(
  opt?: GetLangValOpt
): SupportedLocale {
  let locale = opt?.locale
  if(locale) return locale
  
  // ‰ªé user ‰∏≠Âà§Êñ≠
  const user = opt?.user
  if(user) {
    const { language, systemLanguage = "en" } = user
    if(language !== "system") return language
    locale = normalizeLanguage(systemLanguage)
    return locale
  }

  // ‰ªé body ‰∏≠Âà§Êñ≠
  const liuLang = opt?.body?.x_liu_language
  if(liuLang && typeof liuLang === "string") {
    locale = normalizeLanguage(liuLang)
    return locale
  }

  return getFallbackLocale()
}

/** ËøîÂõû‰∏Ä‰∏™ÁøªËØëÂáΩÊï∞ t */
export function useI18n(
  langAtom: LangAtom,
  opt1?: GetLangValOpt,
) {

  const _getVal = (key: string) => {
    let locale = getCurrentLocale(opt1)
    let val = langAtom[locale]?.[key]
    if(val) return val
    const fLocale = getFallbackLocale()
    if(fLocale !== locale) {
      val = langAtom[fLocale]?.[key]
      if(val) return val
    }
  }

  const t = (key: string, opt2?: Record<string, string>) => {
    let res = _getVal(key)
    if(!res) return ""
    if(!opt2) return res

    // Â§ÑÁêÜ opt2
    const keys = Object.keys(opt2)
    for(let i=0; i<keys.length; i++) {
      const v = keys[i]
      const theVal = opt2[v]
      const dynamicPattern = `{${v}}`
      const escapedPattern = dynamicPattern.replace(/[{}]/g, '\\$&')
      const regexPattern = new RegExp(escapedPattern, 'g')
      res = res.replace(regexPattern, theVal) 
    }
    return res
  }

  return { t }
}

/** Ëé∑ÂèñÂ∫îÁî®ÂêçÁß∞ */
export function getAppName(
  opt1?: GetLangValOpt,
) {
  const { t } = useI18n(commonLang, opt1)
  const res = t('appName')
  if(res) return res
  return "xxx"
}